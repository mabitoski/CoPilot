from typing import Any
from typing import Dict
from typing import Optional

from fastapi import HTTPException
from pydantic import BaseModel
from pydantic import Field
from pydantic import root_validator


class IntegrationRequest(BaseModel):
    """
    Represents a generic N8N workflow execution request.
    """

    workflow_id: str = Field(..., description="The target workflow identifier", example="12")
    payload: Dict[str, Any] = Field(
        default_factory=dict,
        description="Arbitrary payload forwarded to the workflow",
        example={"title": "This is the title", "description": "Generated by CoPilot"},
    )


class ExecuteWorkflowRequest(BaseModel):
    workflow_id: str = Field(..., description="The ID of the workflow", example="12")
    execution_arguments: Optional[Dict[str, Any]] = Field(
        default_factory=dict,
        description="Arguments forwarded to the workflow execution",
        example={"customer_code": "socfortress"},
    )

    @root_validator
    def check_customer_code(cls, values):
        execution_arguments = values.get("execution_arguments", {})
        if "customer_code" not in execution_arguments or not execution_arguments["customer_code"]:
            raise HTTPException(status_code=400, detail="customer_code is required")
        return values
